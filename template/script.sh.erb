#!/usr/bin/env bash

<%-
  session_dir = session.staged_root
  tutorial_dir = session.staged_root.join('ParallelR')
%>

# Load the required environment
setup_env () {
  module purge

  # The rserver container module should set these environment variables:

  #   SINGULARITY_BINDPATH="/etc,/media,/mnt,/opt,/run,/srv,/usr,/var,/users"
  #   RSTUDIO_SERVER_IMAGE="/usr/local/project/ondemand/singularity/rstudio/rstudio_launcher_centos7.simg"
  #   PATH="$PATH:/path/to/R:/path/to/rstudio/rserver"
 
  # SINGULARITY_BINDPATH is being used to bind all RStudio's requirements from
  # the host into the guest, and so those values may vary between sites.

  module load ondemand
  module load xalt/latest rstudio_launcher/centos7 <%= context.version %>
  module load <%= context.extra_modules %>
  <%- if context.include_tutorials == "1" %>
  export R_LIBS_USER="<%= tutorial_dir %>/Rworkshop"
  mkdir -p "<%= tutorial_dir %>/Rworkshop"
  export SINGULARITY_HOME="<%= tutorial_dir %>"
  <%- end %>
}
setup_env

# if you're in a specialized version of RStudio (classes or tutorials)
if [[ "$SINGULARITY_HOME" != "$HOME" ]]; then

  # prepare the host directories and files
  mkdir -p "<%= tutorial_dir %>"
  mkdir -p "$SINGULARITY_HOME"
  mv "<%= session_dir %>/bin" "<%= tutorial_dir %>"
  touch "$SINGULARITY_HOME/0_${OSC_CLASS_ID:-osc_class}.md"

  export WORKING_DIR="<%= tutorial_dir %>"
else
  export WORKING_DIR="<%= session_dir %>"
fi

#
# Start RStudio Server
#
# PAM auth helper used by RStudio
export RSTUDIO_AUTH="$WORKING_DIR/bin/auth"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="$WORKING_DIR/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "$WORKING_DIR/rsession.sh" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="$WORKING_DIR/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # rsession.sh doesn't share the same env as the outside script, so these
  # need to be set explicitly
  export R_LIBS_SITE="${R_LIBS_SITE}"
  export TZ="US/Eastern"
  export HOME="$SINGULARITY_HOME"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "$WORKING_DIR/rsession.sh"

# Set working directory to home directory
cd "${SINGULARITY_HOME}"

# Output debug info
module list
hostname

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

# --contain is used to override the bindpaths specified in OSC's
# singularity.conf which would otherwise conflict in /etc
# using --contain requires us to bind mount in addition directories including
# /dev and /proc
# optional_tutorial_home_bind is used when include_tutorials to change the home
# directory to get a clean environment without clobbering files
SINGULARITYENV_LD_LIBRARY_PATH="$LD_LIBRARY_PATH" singularity run --contain \
 -B $TMPDIR:/tmp \
 -B $WORKING_DIR \
 "$RSTUDIO_SERVER_IMAGE" \
 --www-port "${port}" \
 --auth-none 0 \
 --auth-pam-helper-path "${RSTUDIO_AUTH}" \
 --auth-encrypt-password 0 \
 --rsession-path "${RSESSION_WRAPPER_FILE}"
